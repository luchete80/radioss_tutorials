diff asdif_gen_multitool.py asdif_gen_springs.py > dif_mt_sprnigs.diff

20,22c20,22
< largo = 0.2
< delta = 0.0016
< thck  = 7.0e-4      #Plate Thickness
---
> largo = 0.1
> delta = 0.00125
> thck  = 5.0e-4      #Plate Thickness
46c46
< tool_rad      = 0.00755    #Tool radius
---
> tool_rad      = 0.0025    #Tool radius
53c53
< supp_rel_time = 5.0
---
> supp_rel_time = 10.0
58a59
> tool_springs  = True
71d71
< tool_temp           = 100
78c78
< multi_tool          = True
---
> multi_tool          = False
102,143c102,118
< Ti6Al4V=False
< AISI430=True
< 
< if Ti6Al4V:
<     ###### MATERIAL
<     mat = Material(1,thermal) #ID, THERMAL
<     mat.rho     = 4430.0
<     mat.E       = 105.0e9
<     mat.nu      = 0.34
<     mat.vs_fac  = vscal_fac
<     
<     #thermal
<     mat.k_th  = 7.4 # 15 //
<     mat.cp_th = 520.0
<     
<     mat.Ajc   = 790.0e6
<     mat.Bjc   = 478.0e6
<     mat.njc   = 0.28
<     mat.mjc   = 1.0
<     mat.Cjc   = 0.032
<     mat.e0jc  = 1.0
< 
< if AISI430: #Verification of Johnson-Cook parameters of ferritic stainless steel by drilling process: experimental and finite element simulations
<             #Mehmet Erdi Korkmaz (2020)
<     
<     ###### MATERIAL
<     mat = Material(1,thermal) #ID, THERMAL
<     mat.rho     = 7800.0
<     mat.E       = 200.0e9
<     mat.nu      = 0.3
<     mat.vs_fac  = vscal_fac
<     
<     #thermal
<     mat.k_th  = 26.1 # 15 //
<     mat.cp_th = 460.0
<     
<     mat.Ajc   = 359.0e6
<     mat.Bjc   = 327.0e6
<     mat.njc   = 0.454
<     mat.mjc   = 0.919
<     mat.Cjc   = 0.0786
<     mat.e0jc  = 0.04
---
> ###### MATERIAL
> mat = Material(1,thermal) #ID, THERMAL
> mat.rho     = 4430.0
> mat.E       = 105.0e9
> mat.nu      = 0.34
> mat.vs_fac  = vscal_fac
> 
> #thermal
> mat.k_th  = 7.4 # 15 //
> mat.cp_th = 520.0
> 
> mat.Ajc   = 790.0e6
> mat.Bjc   = 478.0e6
> mat.njc   = 0.28
> mat.mjc   = 1.0
> mat.Cjc   = 0.032
> mat.e0jc  = 1.0
219a195,199
> driver_top = Spring_Mesh(1002); #ID, Create Node count,
> driver_top.add_node(x_init, y_init, (tool_rad + thck/2.0 + gap + thck_rig/2.0+2.0*tool_rad))
> #Elements will be created once connectiovities are known (after tools node ids will be known)
> #TODO: USE NODES ID
> 
224a205,207
>   driver_bot = Spring_Mesh(1003); #ID, Create Node count,
>   driver_bot.add_node(x_init_o, y_init_o, (-tool_rad + -thck/2.0 - gap - thck_rig/2.0-2.0*tool_rad))
> 
228c211
< 
---
> driver_top_mesh_mt = []
260c243,251
<         
---
> 
>             #MESHES FOR SPRINGS
>             count = 0
>             for j in range(multi_tool_N-1):
>                 driver_top_mesh_mt.append(Spring_Mesh(1004+count)); #ID, Create Node count,
>                 driver_top_mesh_mt[count].add_node(cos * x_init-sin*y_init, \
>                                                    sin*x_init+cos*y_init, (tool_rad + thck/2.0 + gap + thck_rig/2.0+2.0*tool_rad))
>                 count+=1
>                 
266c257
< 
---
> print ("Part index i: ", i)
325c316
< #model.end_proc_time = end_time
---
> #model.end_proc_time = end_time   #USED
342c333,334
< sph1_pt.is_moving = True
---
> if (not tool_springs):
>   sph1_pt.is_moving = True
349c341,342
<   sph2_pt.is_moving = True
---
>   if (not tool_springs):
>     sph2_pt.is_moving = True
351c344
<     
---
> 
352a346
> #IMPORTANT: sph_pts has the size of ADDED TOOLS
361c355,356
<             sph_pts[i].is_moving = True
---
>             if (not tool_springs):
>               sph_pts[i].is_moving = True
369c364,365
<             sph_pts[i].is_moving = True
---
>             if (not tool_springs):
>               sph_pts[i].is_moving = True
373,376c369,371
<     if double_sided:
<         i=-1
<     else:
<         i=-2
---
>     i=-1 #Because if bottom tool increases 1
>     
> print ("After multi tools, part index i: ", i)
383a379,387
> 
> #CHANGED FOR CONTEMPLATING DOUBLE SIDEDsph_pt
> #MAX LENGTH, not important if used or not
> spring_toolnodes = [0] * 2 * multi_tool_N
> 
> #spring_toolnodes.append(model.tot_nod_count)
> spring_toolnodes[0] = model.tot_nod_count
> print ("Saving spring element node 1: ", model.tot_nod_count)
> 
386c390,392
< 
---
>   spring_toolnodes[1] = model.tot_nod_count
>   print ("Append spring node ", model.tot_nod_count)    
> i = 0
389a396,401
>         print ("Append spring node ", model.tot_nod_count)
>         #spring_toolnodes.append(model.tot_nod_count) #SPHERE NODE CENTER SPRING PARTS ARE AT THE END BUT WE're KEEPIN' NODE COUNT
>         spring_toolnodes[2+i]=model.tot_nod_count 
>         i+=1
> 
> print ("spring_tool size", len(spring_toolnodes))
398c410
<     print(f'add support {sp} to part {4+bot_tool_present+i+sp}')
---
>     print(f'add support {sp} to part {4+bot_tool_present+i+sp}, id {4+bot_tool_present+i+sp}')
401a414
>     supp_part[sp].is_support = True
409a423,476
> if (tool_springs):
>   print ("Adding Springs")
>   print ("---------------------------------------") 
>   tool_springs_pts =[]
>   tool_springs_pts.append(Part(4+8+multi_tool_N))
>   driver_top.add_elem(spring_toolnodes[0],model.tot_nod_count+1) #NEXT NODE
>   #driver_top.elnod[0][0] = - model.tot_nod_count+1
>   #driver_top.add_elem(0,model.tot_nod_count+1) #NEXT NODE
>   tool_springs_pts[0].AppendMesh(driver_top)
>   tool_springs_pts[0].asignPropID(4)
>   tool_springs_pts[0].elcon_renumber = False ### TO BE MODIFIED
>   tool_springs_pts[0].is_moving = True
>   #driver_top.add_elem()
>   print ("Nodes: ", spring_toolnodes[0], "; ", model.tot_nod_count+1)
>   #tool_springs_pts[0].mesh[0].add_elem(spring_toolnodes[0],model.tot_nod_count+1) #NEXT NODE
>   model.AppendPart(tool_springs_pts[0])
> 
>   print ("Nodes: ", model.part[model.part_count-1].mesh[0].elnod[0][0], model.part[model.part_count-1].mesh[0].elnod[0][1])
>     #driver_top.mesh[0].ini_node_id
>   #0 and 1 always generated
>   tool_springs_pts.append(Part(4+8+multi_tool_N+1))
>   if double_sided:
>     print ("Adding Bottom Springs")
>     tool_springs_pts[1].AppendMesh(driver_bot)
>     tool_springs_pts[1].asignPropID(4)
>     tool_springs_pts[1].elcon_renumber = False ### TO BE MODIFIED
>     tool_springs_pts[1].is_moving = True
>     model.AppendPart(tool_springs_pts[1])
> 
> 
>   if (multi_tool):
>       #ALL SPRINGS FOR ODD (TOP) AND EVEN (BOTTOM)
>       for i in range(multi_tool_N-1):
>         #tool_springs_pts =[]
>         #8 SUPPORTS + 2 TOOLS + SHELL 
>         tool_springs_pts.append(Part(4+8+multi_tool_N+i+2)) #ODD NUMBERS FOR UPPER TOOLS
>         #ODD NUMBERS FORSPRING TOOL NUMBERS
>         #if (i%2==0): #WHEN DOUBLE SIDED AND MULTITOOL
>         print ("i ", i)
>         driver_top_mesh_mt[i].add_elem(spring_toolnodes[2+i*2],model.tot_nod_count+1)
>         print ("Nodes: ", spring_toolnodes[2*i+2], "; ", model.tot_nod_count+1)
>           #ADD HERE AN IF DOUBLE SIDED DRIVER BOT MESH WHICH IS IN A DIFFERENT NUMBER
>         tool_springs_pts[i+2].AppendMesh(driver_top_mesh_mt[i])
>         print ("mesh nodes ", tool_springs_pts[i+2].mesh[0].elnod[0][0], tool_springs_pts[i+2].mesh[0].elnod[0][1])
>         print ("DRIVER TOP MESH  size ", driver_top_mesh_mt[i].elnod)
>         tool_springs_pts[i+2].asignPropID(4)
>         tool_springs_pts[i+2].elcon_renumber = False ### TO BE MODIFIED
>         tool_springs_pts[i+2].is_moving = True
>         #driver_top.add_elem()
> 
>         #tool_springs_pts[0].mesh[0].add_elem(spring_toolnodes[0],model.tot_nod_count+1) #NEXT NODE
>         model.AppendPart(tool_springs_pts[i+2])
> 
> 
416a484,486
> if (tool_springs):
>   model.AppendProp(SpringProp(4,1.0e6))
> 
603,604c673,674
<   model.part[p+1].temp_fnc.Append(1.0e-3, tool_temp)
<   model.part[p+1].temp_fnc.Append(model.end_proc_time+supp_rel_time+dynrel_time, tool_temp)
---
>   model.part[p+1].temp_fnc.Append(1.0e-3, 500.)
>   model.part[p+1].temp_fnc.Append(model.end_proc_time+supp_rel_time+dynrel_time, 500.)
631,632d700
< 
< 
